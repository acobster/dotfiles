#!/usr/bin/env bash

DOTFILES_DIR=$(dirname $0)

DEFAULT_RUBY='2.5.1'

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

usage() {
  echo
  echo '  setup [-h|--help] [--skip-vim] [--skip-ruby] [-r|--ruby-version=<RUBY_VERSION>]'
  echo
}

case $key in
    -h|--help)
    # show usage and bail
    usage
    exit
    ;;
    --skip-composer)
    SKIP_COMPOSER=1
    shift # past option
    ;;
    --skip-fzf)
    SKIP_FZF=1
    shift # past option
    ;;
    --skip-vim)
    SKIP_INSTALL_VIM=1
    shift # past option
    ;;
    --skip-golang)
    SKIP_GOLANG=1
    shift # past option
    ;;
    --skip-hub)
    SKIP_HUB=1
    shift # past option
    ;;
    --skip-dotfiles)
    SKIP_DOTFILES=1
    shift # past option
    ;;
    --skip-ruby)
    RUBY_VERSION='none'
    shift # past option
    ;;
    --skip-rust)
    SKIP_RUST=1
    shift # past option
    ;;
    -r|--ruby-version)
    RUBY_VERSION="$2"
    shift # past option
    shift # past value
    ;;
    --skip-node)
    SKIP_NODE=1
    shift # past option
    ;;
    --skip-yarn)
    SKIP_YARN=1
    shift # past option
    ;;
    --skip-packages)
    SKIP_PACKAGES=1
    shift # past option
    ;;
    --skip-docker)
    SKIP_DOCKER=1
    shift # past option
    ;;
    --install-zazu)
    INSTALL_ZAZU=1
    shift # past option
    ;;
    --skip-zazu)
    SKIP_ZAZU=1
    shift # past option
    ;;
    --skip-keybase)
    SKIP_KEYBASE=1
    shift # past option
    ;;
    *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


function main() {
  install_ruby
  install_rust
  install_composer
  install_fzf
  install_vim
  install_golang
  install_hub
  install_node
  install_yarn
  install_packages
  install_docker
  install_lando
  install_zazu
  install_keybase
  install_dotfiles

  configure_git
}

function install_ruby() {
  if [[ -z $(which rbenv) ]] ; then
    git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    # redirect stuff to stderr to avoid evaluating output
    echo 'installing rbenv...'
    $(
      cd $HOME/.rbenv
      src/configure >&2
      make -C src >&2
    )

    export PATH="$HOME/.rbenv/bin:$PATH"
  fi

  if ! [[ -d "$(rbenv root)"/plugins ]] ; then
    echo 'installing ruby-build...'
    mkdir -p "$(rbenv root)"/plugins
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  fi

  if [[ -z "$RUBY_VERSION" ]] ; then
    # no --ruby-version opt given

    rbenv install -l
    read -p "pick a version of ruby to install: (${DEFAULT_RUBY}/\"none\" to skip) " -t 10 RUBY_VERSION

    if [[ "$RUBY_VERSION" = "none" ]] ; then
      return
    fi
    RUBY_VERSION=${RUBY_VERSION:-"$DEFAULT_RUBY"}
  fi

  # if ruby version was instead set by a CLI arg
  if [[ "$RUBY_VERSION" = "none" ]] ; then
    return
  fi

  echo "Installing ruby ${RUBY_VERSION}..."
  rbenv install "$RUBY_VERSION"
  rbenv global "$RUBY_VERSION"
  rbenv rehash

  echo
  echo 'Done!'
  echo
  echo "rbenv global: $(rbenv global)"
  echo
}

function install_rust() {
  if [[ -z "$(which rustc)" ]] && [[ -z "$SKIP_RUST" ]] ; then
    echo 'Installing rust...'
    wget -O rustup-init.sh https://sh.rustup.rs
    sudo sh rustup-init.sh -y
    rm rustup-init.sh
  fi
}

function install_composer() {
  if [[ -z "$(which composer)" ]] && [[ -z "$SKIP_COMPOSER" ]] ; then
    echo 'Installing composer...'
    php install-composer.php
    chmod a+x composer.phar
    sudo mv composer.phar /usr/local/bin/composer

    echo "Composer is now installed at $(which composer)"
  fi
}

function install_fzf() {
  if [[ -z "$(which fzf)" ]] && [[ -z "$SKIP_FZF" ]] ; then
    echo 'Installing fzf...'
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf

    # dotfiles are already setup for fzf stuff,
    # but install bindings & bash completion stuff
    ~/.fzf/install --completion --key-bindings --no-update-rc

    echo "fzf installed at $(which fzf)"
  fi
}

function install_vim() {
  if [[ -z "$(which vim)" ]] && [[ -z "$SKIP_INSTALL_VIM" ]] ; then
    read -p 'no vim detected! install? [y/N] ' install
    if [[ "$install" = 'y' ]] ; then
      echo 'updating vim repositories...'
      sudo apt-get update
      echo 'installing vim...'
      sudo apt-get install -y vim
    fi

    if [[ "$(which vim)" ]] ; then
      echo "vim is now installed at $(which vim)"
    fi
  fi
}

function install_golang() {
  if [[ -z "$(which go)" ]] && [[ -z "$SKIP_GOLANG" ]] ; then
    echo 'installing go...'

    wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzvf go1.11.linux-amd64.tar.gz
    export PATH=/usr/local/go/bin:$PATH
    rm go1.11.linux-amd64.tar.gz

    if [[ "$(which go)" ]] ; then
      echo "go is not installed at $(which go)"
    else
      echo 'no go binary detected after install process!!'
    fi

  fi
}

function install_hub() {
  if [[ -z "$(which hub)" ]] && [[ -z "$SKIP_HUB" ]] ; then
    echo 'installing hub to help you win at git...'

    wget https://github.com/github/hub/releases/download/v2.5.1/hub-linux-amd64-2.5.1.tgz
    tar -xzvf hub-linux-amd64-2.5.1.tgz
    sudo mv hub-linux-amd64-2.5.1/bin/hub /usr/local/bin/hub
    rm -rf hub-linux-amd64-2.5.1.tgz hub-linux-amd64-2.5.1

    if [[ "$(which hub)" ]] ; then
      echo "hub is now installed at $(which hub)"
    fi
  fi
}

function install_node() {
  if [[ -z "$SKIP_NODE" ]] && [[ -z "$(which node)" ]] ; then
    echo 'installing nodejs...'
    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
    sudo apt-get install -y nodejs npm

    echo "node $(node --version) is now installed"
  fi
}

function install_yarn() {
  if [[ -z "$SKIP_YARN" ]] ; then
    if [[ -z "$(which node)" ]] ; then
      echo 'no npm detected...skipping yarn'
      return
    fi

    if [[ -z "$(which yarn)" ]] && [[ -z "$SKIP_YARN" ]] ; then
      echo 'installing yarn...'
      sudo npm install -g yarn
      echo "yarn is now installed at $(which yarn)"
    fi
  fi
}

function install_packages() {
  if [[ "$SKIP_PACKAGES" ]] ; then
    return
  fi

  if [[ "$(which apt-get)" ]] ; then
    echo 'installing Linux packages...'
    sudo apt-get update
    sudo apt-get install -y \
      xclip \
      tree \
      tmux \
      php \
      php-xml \
      jq \
      net-tools
  fi
}

function install_docker() {
  if [[ -z $SKIP_DOCKER ]] && [[ -z $(which docker) ]]; then
    echo 'installing Docker CE...'
    DIR=$(dirname $0)
    $DIR/install-docker-ce.sh
  fi
}

function install_lando() {
  if [[ -z $(which lando) ]] ; then
    echo 'installing Lando beta.47...'
    wget https://github.com/lando/lando/releases/download/v3.0.0-beta.47/lando-v3.0.0-beta.47.deb
    sudo dpkg -i lando-v3.0.0-beta.47.deb
    rm lando-v3.0.0-beta.47.deb
    echo "lando version $(lando version) is now installed at $(which lando)"
  fi
}

function install_zazu() {
  if [[ "$SKIP_ZAZU" = 1 ]] ; then
    return
  fi

  if [[ -z "$INSTALL_ZAZU" ]] ; then
    read -p 'Install Zazu? (y/N) ' INSTALL_ZAZU
    if ! [[ "$INSTALL_ZAZU" = 'y' ]] ; then
      return
    fi
  fi

  echo 'installing zazu...'

  sudo apt-get update
  sudo apt-get install -y libgconf-2-4 gconf-service-backend gconf-service gconf2 libindicator7 libappindicator1

  wget https://github.com/tinytacoteam/zazu/releases/download/v0.5.2/zazu_0.5.2_amd64.deb
  sudo dpkg -i zazu_0.5.2_amd64.deb
  rm zazu_0.5.2_amd64.deb
}

function install_keybase() {
  if [[ -z "$(which keybase)" ]] ; then
    echo 'installing keybase...'
    curl -O https://prerelease.keybase.io/keybase_amd64.deb
    sudo dpkg -i keybase_amd64.deb
    sudo apt-get install -f
    run_keybase
    rm keybase_amd64.deb
    echo "keybase is now installed at $(which keybase)"
  fi
}

function install_dotfiles() {
  if [[ -z "$SKIP_DOTFILES" ]] ; then
    echo 'setting up dotfiles...'
    $DOTFILES_DIR/dtf
  fi
}

function configure_git() {
  if [[ -z "$(git config --global user.email)" ]] ; then
    echo 'configuring git...'
    git config --global user.email acobster@gmail.com
  fi
  if [[ -z "$(git config --global user.name)" ]] ; then
    git config --global user.name 'Coby Tamayo'
  fi
}


main

