#!/usr/bin/env bash

DOTFILES_DIR=$(dirname $0)

DEFAULT_RUBY='2.5.1'

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

usage() {
  echo
  echo '  setup [-h|--help] [--skip-neovim] [--skip-ruby] [-r|--ruby-version=<RUBY_VERSION>]'
  echo
}

case $key in
    -h|--help)
    # show usage and bail
    usage
    exit
    ;;
    --skip-neovim)
    SKIP_INSTALL_NEOVIM=1
    shift # past option
    ;;
    --skip-ruby)
    RUBY_VERSION='none'
    shift # past option
    ;;
    -r|--ruby-version)
    RUBY_VERSION="$2"
    shift # past option
    shift # past value
    ;;
    --skip-docker)
    SKIP_DOCKER=1
    shift # past option
    ;;
    *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


function main() {
  install_ruby
  install_neovim
  install_golang
  install_hub
  install_packages
  install_docker
  install_lando
  install_dotfiles
  configure_git
}

function install_ruby() {
  if [[ -z $(which rbenv) ]] ; then
    git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    # redirect stuff to stderr to avoid evaluating output
    echo 'installing rbenv...'
    $(
      cd $HOME/.rbenv
      src/configure >&2
      make -C src >&2
    )

    export PATH="$HOME/.rbenv/bin:$PATH"
  fi

  if ! [[ -d "$(rbenv root)"/plugins ]] ; then
    echo 'installing ruby-build...'
    mkdir -p "$(rbenv root)"/plugins
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  fi

  if [[ -z "$RUBY_VERSION" ]] ; then
    # no --ruby-version opt given

    rbenv install -l
    read -p "pick a version of ruby to install: (${DEFAULT_RUBY}/\"none\" to skip) " -t 10 RUBY_VERSION

    if [[ "$RUBY_VERSION" = "none" ]] ; then
      return
    fi
    RUBY_VERSION=${RUBY_VERSION:-"$DEFAULT_RUBY"}
  fi

  # if ruby version was instead set by a CLI arg
  if [[ "$RUBY_VERSION" = "none" ]] ; then
    return
  fi

  echo "Installing ruby ${RUBY_VERSION}..."
  rbenv install "$RUBY_VERSION"
  rbenv global "$RUBY_VERSION"
  rbenv rehash

  echo
  echo 'Done!'
  echo
  echo "rbenv global: $(rbenv global)"
  echo
}

function install_neovim() {
  if [[ -z "$(which nvim)" ]] && [[ -z "$SKIP_INSTALL_NEOVIM" ]] ; then
    read -p 'no neovim detected! install? [y/N] ' install
    if [[ "$install" = 'y' ]] ; then
      echo 'adding neovim repository...'
      sudo add-apt-repository ppa:neovim-ppa/stable
      echo 'updating neovim repositories...'
      sudo apt-get update
      echo 'installing neovim...'
      sudo apt-get install -y neovim
    fi

    if [[ "$(which nvim)" ]] ; then
      echo "neovim is now installed at $(which nvim)"
    fi
  fi
}

function install_golang() {
  if [[ -z "$(which go)" ]] ; then
    echo 'installing go...'

    wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzvf go1.11.linux-amd64.tar.gz
    export PATH=/usr/local/go/bin:$PATH
    rm go1.11.linux-amd64.tar.gz

    if [[ "$(which go)" ]] ; then
      echo "go is not installed at $(which go)"
    else
      echo 'no go binary detected after install process!!'
    fi

  fi
}

function install_hub() {
  if [[ -z "$(which hub)" ]] ; then
    echo 'installing hub to help you win at git...'

    wget https://github.com/github/hub/releases/download/v2.5.1/hub-linux-amd64-2.5.1.tgz
    tar -xzvf hub-linux-amd64-2.5.1.tgz
    sudo mv hub-linux-amd64-2.5.1/bin/hub /usr/local/bin/hub
    rm -rf hub-linux-amd64-2.5.1.tgz hub-linux-amd64-2.5.1

    if [[ "$(which hub)" ]] ; then
      echo "hub is now installed at $(which hub)"
    fi
  fi
}

function install_packages() {
  if [[ "$(which apt-get)" ]] ; then
    echo 'installing Linux packages...'
    sudo apg-get update
    sudo apt-get install -y \
      xclip \
      tree
  fi
}

function install_docker() {
  if [[ -z $SKIP_DOCKER ]] && [[ -z $(which docker) ]]; then
    echo 'installing Docker CE...'
    DIR=$(dirname $0)
    $DIR/install-docker-ce.sh
  fi
}

function install_lando() {
  if [[ -z $(which lando) ]] ; then
    echo 'installing Lando beta.47...'
    wget https://github.com/lando/lando/releases/download/v3.0.0-beta.47/lando-v3.0.0-beta.47.deb
    sudo dpkg -i lando-v3.0.0-beta.47.deb
    rm lando-v3.0.0-beta.47.deb
    echo "lando version $(lando version) is now installed at $(which lando)"
  fi
}

function install_dotfiles() {
  echo 'setting up dotfiles...'
  $DOTFILES_DIR/dtf
}

function configure_git() {
  if [[ -z "$(git config --global user.email)" ]] ; then
    echo 'configuring git...'
    git config --global user.email acobster@gmail.com
  fi
  if [[ -z "$(git config --global user.name)" ]] ; then
    git config --global user.name 'Coby Tamayo'
  fi
}


main

