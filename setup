#!/usr/bin/env bash

DOTFILES_DIR=$(dirname $0)

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

usage() {
  echo 'usage: setup [-h|--help] [-N|--no-defaults]'
  echo '             [--skip-<SKIP>] [--<PACKAGE>]'
  echo
  echo '  --no-defaults'
  echo '    Skip all default setup. Without additional options, this is a noop.'
  echo
  echo '  SKIP options:'
  echo '  - bat'
  echo '  - babashka'
  echo '  - clojure'
  echo '  - composer'
  echo '  - docker'
  echo '  - dotfiles'
  echo '  - fzf'
  echo '  - golang'
  echo '  - java'
  echo '  - packages'
  echo '  - update'
  echo '  - yarn'
  echo
  echo '  PACKAGE options:'
  echo '  - keybase'
  echo '  - lua'
  echo '  - mariadb'
  echo '  - racket'
  echo '  - ruby'
  echo '  - rust'
  echo '  - zazu'
  echo
  echo '  EXAMPLES'
  echo
  echo '    setup -h                         # print this usage text'
  echo '    setup --ruby                     # install defaults, plus ruby'
  echo '    setup --ruby --no-defaults       # only install ruby'
  echo '    setup --skip-clojure             # install defaults, minus clojure'
  echo '    setup --skip-clojure --skip-bat  # install defaults, minus clojure and bat'
  echo
}

case $key in
    -h|--help)
    # show usage and bail
    usage
    exit
    ;;
    #
    # Support skipping default actions
    #
    --skip-update)
    SKIP_PACKAGE_UPDATES=1
    shift # past option
    ;;
    --skip-packages)
    SKIP_PACKAGES=1
    shift # past option
    ;;
    --skip-composer)
    SKIP_COMPOSER=1
    shift # past option
    ;;
    --skip-fzf)
    SKIP_FZF=1
    shift # past option
    ;;
    --skip-golang)
    SKIP_GOLANG=1
    shift # past option
    ;;
    --skip-dotfiles)
    SKIP_DOTFILES=1
    shift # past option
    ;;
    --skip-bat)
    SKIP_BAT=1
    shift # past option
    ;;
    --skip-yarn)
    SKIP_YARN=1
    shift # past option
    ;;
    --skip-docker)
    SKIP_DOCKER=1
    shift # past option
    ;;
     --skip-java)
    SKIP_JAVA=1
    shift # past option
    ;;
     --skip-clojure)
    SKIP_CLOJURE=1
    shift # past option
    ;;
     --skip-babashka)
    SKIP_BABASHKA=1
    shift # past option
    ;;
    #
    # support installing additional software
    #
    --keybase)
    INSTALL_KEYBASE=1
    shift # past option
    ;;
    --racket)
    INSTALL_RACKET=1
    shift # past option
    ;;
    --zazu)
    INSTALL_ZAZU=1
    shift # past option
    ;;
    --ruby)
    RUBY_VERSION="$2"
    shift # past option
    shift # past value
    ;;
    --rust)
    INSTALL_RUST=1
    shift # past option
    ;;
    --mariadb)
    INSTALL_MARIADB=1
    shift # past option
    ;;
    --lua)
    INSTALL_LUA=1
    shift # past option
    ;;
    #
    # override defaults
    #
    -N|--no-defaults)
    SKIP_BABASHKA=1
    SKIP_BAT=1
    SKIP_CLOJURE=1
    SKIP_COMPOSER=1
    SKIP_FZF=1
    SKIP_GOLANG=1
    SKIP_DOTFILES=1
    SKIP_DOCKER=1
    SKIP_JAVA=1
    SKIP_PACKAGE_UPDATES=1
    SKIP_PACKAGES=1
    SKIP_YARN=1
    shift # past option
    ;;
    *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


function main() {
  install_repo_updates
  install_packages

  # langs
  install_composer
  install_golang
  install_lua
  install_java
  install_clojure
  install_babashka
  install_racket
  install_ruby
  install_rust

  # Dev stuff
  install_docker
  install_lando
  setup_mariadb
  install_yarn

  # misc
  install_bat
  install_fzf
  install_keybase
  install_zazu

  install_dotfiles
}

install_repo_updates() {
  if [[ -z "$SKIP_PACKAGE_UPDATES" ]]
  then
    sudo apt-get update
  fi
}


function install_ruby() {
  if [[ -z "$RUBY_VERSION" ]] ; then
    return
  fi

  if [[ -z $(which rbenv) ]] ; then
    git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    # redirect stuff to stderr to avoid evaluating output
    echo 'installing rbenv...'
    $(
      cd $HOME/.rbenv
      src/configure >&2
      make -C src >&2
    )

    export PATH="$HOME/.rbenv/bin:$PATH"
  fi

  if ! [[ -d "$(rbenv root)"/plugins ]] ; then
    echo 'installing ruby-build...'
    mkdir -p "$(rbenv root)"/plugins
    git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
  fi

  # if ruby version was instead set by a CLI arg
  if [[ "$RUBY_VERSION" = "none" ]] ; then
    return
  fi

  echo "Installing ruby ${RUBY_VERSION}..."
  rbenv install "$RUBY_VERSION"
  rbenv global "$RUBY_VERSION"
  rbenv rehash

  echo
  echo 'Done!'
  echo
  echo "rbenv global: $(rbenv global)"
  echo
}

function install_rust() {
  if [[ "$INSTALL_RUST" ]] ; then
    install-rust
  fi
}

function install_bat() {
  if [[ -z "$(which bat)" ]] && [[ -z "$SKIP_BAT" ]] ; then
    BAT_VERSION='0.9.0'
    echo "Installing Bat v${BAT_VERSION}..."

    __deb_install "https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat_${BAT_VERSION}_amd64.deb"

    echo "Bat is now installed at $(which bat)"
  fi
}

function install_composer() {
  if [[ -z "$(which composer)" ]] && [[ -z "$SKIP_COMPOSER" ]] ; then
    echo 'Installing composer...'
    php install-composer.php
    chmod a+x composer.phar
    sudo mv composer.phar /usr/local/bin/composer

    echo "Composer is now installed at $(which composer)"
  fi
}

function install_fzf() {
  if [[ -z "$(which fzf)" ]] && [[ -z "$SKIP_FZF" ]] ; then
    install-fzf
  fi
}

function install_golang() {
  if [[ -z "$(which go)" ]] && [[ -z "$SKIP_GOLANG" ]] ; then
    install-golang
  fi
}

function install_node() {
  install-node
}

function install_yarn() {
  if [[ -z "$SKIP_YARN" ]] ; then
    install-yarn
  fi
}

function install_packages() {
  if [[ "$SKIP_PACKAGES" ]] ; then
    return
  fi

  install-linux-packages
}

function install_docker() {
  if [[ -z $SKIP_DOCKER ]] && [[ -z $(which docker) ]]; then
    echo 'installing Docker CE...'
    install-docker
  fi
}

function install_lando() {
  if [[ -z $(which lando) ]] ; then
    install-lando
  fi
}

function install_zazu() {
  if [[ "$INSTALL_ZAZU" ]] ; then
    install-zazu
  fi

}

function install_keybase() {
  if [[ "$INSTALL_KEYBASE" ]] && [[ -z "$(which keybase)" ]] ; then
    echo 'installing keybase...'
    install-keybase
  fi
}

function install_racket() {
  if [[ "$INSTALL_RACKET" && -z $(which racket) ]] ; then
    echo 'intalling racket...'
    sudo add-apt-repository ppa:plt/racket --yes
    sudo apt-get install racket -y

    echo "racket is now installed at $(which racket)"
  fi
}

function install_java() {
  if [[ -z "$SKIP_JAVA" && -z "$(which java)" ]]
  then
    sudo apt-get install --yes default-jre default-jdk
    echo "Java is now installed at $(which java)"
  fi
}

function install_clojure() {
  if [[ -z "$SKIP_CLOJURE" && -z "$(which clojure)" ]]
  then
    CLJ_VERSION='1.10.0.411'
    install-clojure
  fi

  if [[ -z "$SKIP_CLOJURE" && -z "$(which lein)" ]]
  then
    install-lein
  fi
}

function install_babashka() {
  if [[ -z "$SKIP_BABASHKA" && -z "$(which bb)" ]]
  then
    install-babashka
  fi
}

function setup_mariadb() {
  if [[ ! -z "$INSTALL_MARIADB" ]]
  then
    sudo mysql_secure_installation
  fi
}

function install_lua() {
  if [[ "$INSTALL_LUA" && -z $(which lua) ]]
  then
    install-lua
  fi

  if [[ "$INSTALL_LUA" && -z $(which luarocks) ]]
  then
    install-luarocks
  fi

  # TODO install packages
}

function install_dotfiles() {
  if [[ -z "$SKIP_DOTFILES" ]] ; then
    echo 'setting up dotfiles...'
    $DOTFILES_DIR/dtf
  fi
}

# Download and install a .deb package from a URL
function __deb_install() {
  deb_file=/tmp/$(basename "$1")
  wget -O "$deb_file" "$1" && sudo dpkg -i "$deb_file"
}


main
